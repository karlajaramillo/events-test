{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/monina/Desktop/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\n//#pages/[meetupId]/index.js\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  // we need to fetch data to show the details\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/monina/Desktop/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description"],"mappings":";;AAAA;AAEA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC7B;AACA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KAVQN,a;;AA+GT,eAAeA,aAAf","sourcesContent":["//#pages/[meetupId]/index.js\nimport { MongoClient, ObjectId } from 'mongodb'\nimport MeetupDetail from '../../components/meetups/MeetupDetail'\n\nfunction MeetupDetails (props) {\n  // we need to fetch data to show the details\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  )\n}\n\nexport async function getStaticPaths () {\n  // Connect to the DB and get access to the meetups collection\n  const client = await MongoClient.connect(\n    'mongodb+srv://kavajaga:Events2022@cluster0.zvp9ap3.mongodb.net/Meetups?retryWrites=true&w=majority'\n  )\n\n  const db = client.db()\n\n  const meetupsCollection = db.collection('meetups')\n\n  // toArray() -> to convert into JS object\n  const result = await meetupsCollection.find({}, { _id: 1 }).toArray()\n  // find accepts two arguments\n  // 1 arg - {} -> give me all without filters\n  // 2 arg - {} -> extract only the field I need.\n  // {_id: 1} -> only includes the ID\n\n  client.close()\n  return {\n    // false -> indicates that you define all paths here\n    // true -> if you define only the popular pages, not all of them, so it will generate when the request is made\n    fallback: false,\n    // paths: [\n    //   {\n    //     params: {\n    //       meetupId: 'm1',\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: 'm2',\n    //     },\n    //   }\n    // ]\n    // map the result to get an --> array with ids\n    paths: result.map(item => ({\n      // the first parenthesis means return an object {}\n      params: {\n        meetupId: item._id.toString()\n      }\n    }))\n  }\n}\n\nexport async function getStaticProps (context) {\n  // fetch data for a single meetup\n  // get the id\n  // params.meetupId because the file name is --> [meetupId]\n  const meetupId = context.params.meetupId // string from the url\n  //const {meetupId} = context.params;\n  console.log(meetupId)\n\n\n  // Now with the id from the Database, we can find this document into the DB with findOne\n  const client = await MongoClient.connect(\n    'mongodb+srv://kavajaga:Events2022@cluster0.zvp9ap3.mongodb.net/Meetups?retryWrites=true&w=majority'\n  )\n\n  const db = client.db()\n\n  const meetupsCollection = db.collection('meetups')\n\n  // toArray() -> to convert into JS object\n  console.log(meetupId)\n  // findOne -> we passed an object\n  // convert the string id from the url --> to object to find the docuement inside db\n  // wrap the url id with --> ObjectId(meetupId) -> to convert it into Object\n  const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\n  console.log(selectedMeetup)\n  client.close()\n\n  //return {\n  // props: {\n  //   meetupData: {\n  //     id: meetupId,\n  //     title: 'The First Meetup',\n  //     image:\n  //       'https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1244',\n  //     address: 'Chicago',\n  //     description: 'This is a second meetup'\n  //   }\n  // }\n  //}\n  return {\n    props: {\n      meetupData: {\n        // to avoid 'Serialization' problem\n        \n      }\n      // meetupData: {\n      //   id: selectedMeetup._id.toString(), // to avoid 'Serialization' problem\n      //   title: selectedMeetup.title,\n      //   address: selectedMeetup.address,\n      //   description: selectedMeetup.description,\n      //   image: selectedMeetup.image\n      // }\n    }\n  }\n}\nexport default MeetupDetails\n"]},"metadata":{},"sourceType":"module"}