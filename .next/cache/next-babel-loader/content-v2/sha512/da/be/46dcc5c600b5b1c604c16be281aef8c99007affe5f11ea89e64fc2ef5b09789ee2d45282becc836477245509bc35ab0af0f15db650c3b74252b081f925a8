{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/monina/Desktop/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\n//#pages/[meetupId]/index.js\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  // we need to fetch data to show the details\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  // Connect to the DB and get access to the meetups collection\n  const client = await MongoClient.connect('mongodb+srv://kavajaga:Events2022@cluster0.zvp9ap3.mongodb.net/Meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); // toArray() -> to convert into JS object\n\n  const result = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); // find accepts two arguments\n  // 1 arg - {} -> give me all without filters\n  // 2 arg - {} -> extract only the field I need. \n  // {_id: 1} -> only includes the ID\n\n  client.close();\n  return {\n    // false -> indicates that you define all paths here\n    // true -> if you define only the popular pages, not all of them, so it will generate when the request is made\n    fallback: false,\n    // paths: [\n    //   {\n    //     params: {\n    //       meetupId: 'm1',\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: 'm2',\n    //     },\n    //   }\n    // ]\n    // map the result to get an --> array with ids\n    paths: result.map(item => ({\n      // the first parenthesis means return an object {}\n      params: {\n        meetupId: item._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  // get the id \n  // params.meetupId because the file name is --> [meetupId]\n  const meetupId = context.params.meetupId; //const {meetupId} = context.params;\n\n  console.log(meetupId); // Now with the id from the Database, we can find this document into the DB with findOne\n\n  const client = await MongoClient.connect('mongodb+srv://kavajaga:Events2022@cluster0.zvp9ap3.mongodb.net/Meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups'); // toArray() -> to convert into JS object\n\n  console.log(meetupId); // findOne -> we passed an object\n\n  const result = await meetupsCollection.findOne({\n    _id: meetupId\n  }).toArray(); //console.log(result)\n\n  client.close(); //return {\n  // props: {\n  //   meetupData: {\n  //     id: meetupId,\n  //     title: 'The First Meetup',\n  //     image:\n  //       'https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1244',\n  //     address: 'Chicago',\n  //     description: 'This is a second meetup'\n  //   }\n  // }\n  //}\n\n  return {\n    props: {\n      meetupData: result\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/monina/Desktop/nextjs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","result","find","_id","toArray","close","fallback","paths","map","item","params","meetupId","toString","getStaticProps","context","console","log","findOne","meetupData"],"mappings":";;AAAA;AACA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC7B;AACA,sBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAGD,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoB,oGAApB,CAArB;AAEC,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CANoC,CAQpC;;AACA,QAAMC,MAAM,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAArB,CAToC,CAUpC;AACA;AACA;AACA;;AAEAR,EAAAA,MAAM,CAACS,KAAP;AACD,SAAO;AACL;AACA;AACAC,IAAAA,QAAQ,EAAE,KAHL;AAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,KAAK,EAAEN,MAAM,CAACO,GAAP,CAAWC,IAAI,KAAK;AAAE;AAC3BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AADJ;AADiB,KAAL,CAAf;AAjBF,GAAP;AAuBD;AAED,OAAO,eAAeC,cAAf,CAA+BC,OAA/B,EAAwC;AAC7C;AACA;AACA;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAJ6C,CAK7C;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAN6C,CAQ7C;;AACA,QAAMf,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoB,oGAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B,CAb6C,CAe7C;;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAhB6C,CAiB7C;;AACA,QAAMV,MAAM,GAAG,MAAMF,iBAAiB,CAACkB,OAAlB,CAA0B;AAACd,IAAAA,GAAG,EAAEQ;AAAN,GAA1B,EAA2CP,OAA3C,EAArB,CAlB6C,CAmB7C;;AAGAR,EAAAA,MAAM,CAACS,KAAP,GAtB6C,CAwB7C;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;AACA,SAAQ;AACNX,IAAAA,KAAK,EAAE;AACLwB,MAAAA,UAAU,EAAEjB;AADP;AADD,GAAR;AAKD;AACD,eAAeR,aAAf","sourcesContent":["//#pages/[meetupId]/index.js\nimport { MongoClient } from 'mongodb'\nimport MeetupDetail from '../../components/meetups/MeetupDetail'\n\nfunction MeetupDetails (props) {\n  // we need to fetch data to show the details\n  return <MeetupDetail ></MeetupDetail>\n}\n\n\nexport async function getStaticPaths() {\n  // Connect to the DB and get access to the meetups collection\n  const client = await MongoClient.connect('mongodb+srv://kavajaga:Events2022@cluster0.zvp9ap3.mongodb.net/Meetups?retryWrites=true&w=majority')\n \n   const db = client.db();\n\n   const meetupsCollection = db.collection('meetups')\n\n   // toArray() -> to convert into JS object\n   const result = await meetupsCollection.find({}, {_id: 1}).toArray();\n   // find accepts two arguments\n   // 1 arg - {} -> give me all without filters\n   // 2 arg - {} -> extract only the field I need. \n   // {_id: 1} -> only includes the ID\n\n   client.close();\n  return {\n    // false -> indicates that you define all paths here\n    // true -> if you define only the popular pages, not all of them, so it will generate when the request is made\n    fallback: false,\n    // paths: [\n    //   {\n    //     params: {\n    //       meetupId: 'm1',\n    //     },\n    //   },\n    //   {\n    //     params: {\n    //       meetupId: 'm2',\n    //     },\n    //   }\n    // ]\n    // map the result to get an --> array with ids\n    paths: result.map(item => ({ // the first parenthesis means return an object {}\n      params: {\n        meetupId: item._id.toString()\n      }\n    }))\n  }\n}\n\nexport async function getStaticProps (context) {\n  // fetch data for a single meetup\n  // get the id \n  // params.meetupId because the file name is --> [meetupId]\n  const meetupId = context.params.meetupId; \n  //const {meetupId} = context.params;\n  console.log(meetupId);\n\n  // Now with the id from the Database, we can find this document into the DB with findOne\n  const client = await MongoClient.connect('mongodb+srv://kavajaga:Events2022@cluster0.zvp9ap3.mongodb.net/Meetups?retryWrites=true&w=majority')\n \n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups')\n\n  // toArray() -> to convert into JS object\n  console.log(meetupId)\n  // findOne -> we passed an object\n  const result = await meetupsCollection.findOne({_id: meetupId}).toArray();\n  //console.log(result)\n\n\n  client.close();\n\n  //return {\n    // props: {\n    //   meetupData: {\n    //     id: meetupId,\n    //     title: 'The First Meetup',\n    //     image:\n    //       'https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&raw_url=true&q=80&fm=jpg&crop=entropy&cs=tinysrgb&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1244',\n    //     address: 'Chicago',\n    //     description: 'This is a second meetup'\n    //   }\n    // }\n  //}\n  return  {\n    props: {\n      meetupData: result\n    }\n  }\n}\nexport default MeetupDetails\n"]},"metadata":{},"sourceType":"module"}